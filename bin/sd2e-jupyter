#!/usr/bin/env bash

CMD=$1
NOTEBOOK=$2
DEBUG=${JPY_DEBUG}

function log(){
    mesg "INFO" $@
}

function debug(){
    if [ "$DEBUG" == 1 ]
    then
        mesg "DEBUG" $@
    fi
}

function die() {
    mesg "ERROR" $@
    exit 1
}

function fail() {
    echo "$@" >&2
    exit 1
}

function mesg() {
    lvl=$1
    shift
    message=$@
    echo "[$lvl] $(utc_date) - $message" >&2
}

function utc_date() {
    echo $(date -u +"%Y-%m-%dT%H:%M:%SZ")
}

function _get_username() {
    
    local uname=$1
    
    debug "_get_username"
    if [ ! -f "${_AGAVE_AUTH}/current" ]
    then
        die "Agave API client not installed or configured"
    fi

    uname=$(jq -r .username "${_AGAVE_AUTH}/current")

    echo $uname
}

function _get_email() {

    debug "_get_email: $uname"
    
    local uname=$1

    if [ -z "$uname" ]
    then
        uname=$(_get_username)
    fi
    
    if [ ! -f "${_AGAVE_STORE}/profiles-list-me.json" ]
    then
        profiles-list -v me > "${_AGAVE_STORE}/profiles-list-me.json"
    fi

    email=$(jq -r .email "${_AGAVE_STORE}/profiles-list-me.json")

    echo $email
}

function get_help() {

    echo "Request assistance from the SD2E team at support@sd2e.org"
    exit 1
}

function do_usage() {
   echo -e "\nusage: $_THIS command options\n"
   echo -e "  $_THIS show : Show details about your Notebook Server"
   echo -e "  $_THIS start -n NAME -e EMAIL -d DURATION --archive : Launch a Notebook Server"
   echo -e "  $_THIS stop <Session ID> : Shut down your Notebook Server\n"
   echo -e "Version: $VERSION | Get help at support@sd2e.org\n"

   _do_deps_check
}

function _do_deps_check() {

    # Check for basic root causes of failure

    if test ! $(which jq) 
    then
        die "Dependency 'jq' not installed [https://stedolan.github.io/jq/]"
    fi
    
    if test ! $(which auth-check) 
    then
        die "Dependency 'sd2e-cli' not installed [https://github.com/SD2E/sd2e-cli]"
    fi
    
    if test ! -f "${_AGAVE_AUTH}/current"
    then
        die "The sd2e-cli is not configured. Run 'tenants-init' to resolve."
    fi

    if test ! $(which bashids)
    then
        die "Dependency 'bashids' not installed [https://github.com/benwilber/bashids]"
    fi

    return 0

}

function do_list() {

    debug "do_list"

    local uname=$(_get_username)
    local tmp=$(mktemp)
    jobs-search -v 'status.in=PENDING,STAGING_INPUTS,STAGING_JOB,QUEUED,RUNNING,SUBMITTING,PROCESSING_INPUTS' "limit=1" "appId.like=${_AGAVE_APP}-${uname}*" >$tmp 2>/dev/null
    local nbsrv=

    if [ $? == 0 ]
    then
        nbsrv=$(jq -r .[].id $tmp)
        if [ ! -z "$nbsrv" ];
        then
            started=$(jq -r .[].startTime $tmp)
            name=$(jq -r .[].name $tmp)
            status=$(jq -r .[].status $tmp)
            rm $tmp
            echo "Name: $name"
            echo "Session ID: $nbsrv"
            echo "Started up: $started"
            echo "Status: $status"
            exit 0
        fi
    fi
    
    echo "No ${_AGAVE_APP} for $uname are running"
}

function do_start() {

    debug "do_start"

    refresh_auth
    local uname=$(_get_username)
    local archive="false"

    while getopts ":ae:n:d:" opt; do
      case "${opt}" in
        e )
          email="$OPTARG"
          ;;
        n )
          jobname="$OPTARG"
          ;;
        d )
          duration="$OPTARG"
          ;;
        a )
          archive="true"
          ;;
        \? )
          echo "Invalid option: $OPTARG" 1>&2
          ;;
        : )
          echo "Invalid option: $OPTARG requires an argument" 1>&2
          ;;
      esac
    done


if [ -z "${jobname}" ]
then
    jobname="${_AGAVE_APP} [$(date -u +"%Y-%m-%dT%H:%M:%SZ")]"
fi
# [TODO] Basic email validation
if [ -z "${email}" ]
then
    email=$(_get_email)
fi
# [TODO] Validate duration conforms at least to 00:00:00
if [ -z "${duration}" ]
then
    duration="08:00:00"
fi

cat << EOF > "${_AGAVE_STORE}/${_AGAVE_APP}.json"
{
  "name": "${jobname}",
  "appId": "${_AGAVE_APP}-${uname}-${VERSION}",
  "maxRunTime": "$duration",
  "archive": ${archive},
  "inputs": {
  },
  "parameter": {
    "email": "$email"
  }
}
EOF

    if [ "$DEBUG" == 1 ]
    then
        cat "${_AGAVE_STORE}/${_AGAVE_APP}.json" && \
        exit 0
    fi

    local _job=$(jobs-submit -v -F ${_AGAVE_STORE}/${_AGAVE_APP}.json | jq -r .id)
    if [ ! -z "${_job}" ]
    then
        echo "Launching Notebook Server session $_job"
    fi

}

function do_stop() {

    JOBID=$1

    if [ ! -z "$JOBID" ]
    then
        jobs-stop $JOBID >/dev/null 2>&1
    else
        do_usage
    fi

    if [ $? == 0 ]
    then
        echo "Notebook Server $JOBID shutting down..."
    fi

}

function refresh_auth() {

    auth-tokens-refresh -S >/dev/null 2>&1
    if [ ! $? == 0 ]
    then
        log "Your API credentials have expired. We will now ask for your password to restore them..."
        auth-tokens-create -S
        if [ ! $? == 0 ]
        then
            log "Authentication was unsuccessful. Try re-rerunning $_THIS $CMD again or seeking assistance."
            get_help
        fi
   fi

   # Maintain a store directory for non-secret stuff
   if [ ! -d "${_AGAVE_STORE}" ]
   then
        mkdir -p "${_AGAVE_STORE}"
   fi
   return 0
}

_THIS=$(basename $0)
_AGAVE_AUTH="$HOME/.agave"
_AGAVE_STORE="$HOME/.sd2e.org"
_AGAVE_APP="jupyter-singularity-maverick"
VERSION=0.1.0
UTIL_DIR=
if [[ -z "$UTIL_DIR" ]]; then
    UTIL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

case $CMD in
    usage)
        do_usage
        ;;
    show)
        do_list
        ;;
    start)
        shift
        do_start "$@"
        ;;
    stop)
        shift
        NBID=$1
        do_stop $NBID
        ;;
    *)
        do_usage
        ;;
esac


# I love dogs, I've always loved dogs.
